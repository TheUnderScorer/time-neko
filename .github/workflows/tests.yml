name: Tests
on:
  repository_dispatch:
    types: [test]
env:
  NX_BRANCH: ${{ github.event.client_payload.number || github.event.client_payload.ref }}
jobs:
  units:
    name: Unit tests & linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{github.event.client_payload.unit_tests_check_id}}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Cache
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('package-lock.json') }}
          restore-keys: nodemodules-

      - name: Install npm dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install && npm install @swc/core-linux-x64-gnu

      - name: Create .env file
        run: |
          echo "TRELLO_API_KEY=${{ secrets.TRELLO_API_KEY }}" >> .env
          echo "NX_ENABLE_DEBUG=true" >> .env

      - name: Lint
        run: npx nx affected --target=lint --base=origin/main --parallel=3 --exclude=electron-main-windows-browser-controller,electron-main-windows-browser-controller-test

      - name: Test
        run: npx nx affected --target=test --base=origin/main --parallel=3 --exclude=electron-main-windows-browser-controller,electron-main-windows-browser-controller-test
        env:
          NX_SHORT_BREAK_DURATION_SECONDS: 5
          NX_LONG_BREAK_DURATION_SECONDS: 15
          NX_WORK_DURATION_SECONDS: 10
          NX_LONG_BREAK_INTERVAL: 4
          NX_AUTO_RUN_WORK: false
          NX_AUTO_RUN_BREAK: false
          NX_RECAPTCHA_KEY: recaptcha-key

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{github.event.client_payload.unit_tests_check_id}}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}

  e2e-website:
    name: Website e2e tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{github.event.client_payload.e2e_website_check_id}}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Cache
        uses: actions/cache@v2
        id: npm-cache
        with:
          path: node_modules
          key: nodemodules-e2e-website-${{ matrix.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: nodemodules-e2e-website-${{ matrix.os }}-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm install

      - name: Setup playwright and serverless
        run: npx playwright install-deps && npm i serverless@3 -g && npx playwright install

      - name: Create .env file
        run: |
          echo "NX_ALLOW_PRERELEASES=true" >> .env
          echo "NX_API_URL=http://localhost:3000/development" >> .env
          echo "NX_APP_URL=http://localhost:4202/development" >> .env
          echo "NX_GITHUB_TOKEN=${{ secrets.GH_ADMIN_TOKEN }}" >> .env
          echo "NX_ENABLE_DEBUG=true" >> .env

      - name: Start lambdas
        run: npx nx serve lambdas &
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build website
        run: npx nx build website --production

      - name: Run tests
        uses: GabrielBB/xvfb-action@v1
        with:
          run: npx nx affected -t e2e --base=origin/main --exclude=electron-e2e,browser-extension-e2e,web-app-e2e

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: trace-website
          path: test-results

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{github.event.client_payload.e2e_website_check_id}}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}

  e2e-browser-extension:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
    name: Browser Extension e2e tests
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{github.event.client_payload.e2e_browser_extension_check_id}}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Setup playwright
        run: npx playwright install-deps && npx playwright install

      - name: Create .env file
        run: |
          echo "NX_TRELLO_API_KEY=${{ secrets.TRELLO_API_KEY }}" >> .env
          echo "NX_TRELLO_TOKEN=${{ secrets.TRELLO_TOKEN }}" >> .env
          echo "NX_ENABLE_DEBUG=true" >> .env

      - name: Build extension
        run: npx nx build browser-extension --production --skip-nx-cache

      - name: Run headless test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: npx nx affected -t e2e --base=origin/main --exclude=electron-e2e,website-e2e,web-app-e2e

      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: browser-extension
          path: dist/apps/browser-extension

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: test-artifact-${{ matrix.os }}-browser-extension
          path: apps/browser-extension-e2e/src/artifacts

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: browser-contexts
          path: apps/browser-extension-e2e/src/contexts/**/chrome_debug.log

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: trace-${{ matrix.os }}-browser-extension
          path: test-results

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{github.event.client_payload.e2e_browser_extension_check_id}}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}

  e2e-web-app:
    name: Web App e2e tests
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{github.event.client_payload.e2e_web_app_check_id}}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Setup playwright
        run: npx playwright install-deps && npx playwright install

      - name: Create .env file
        run: |
          echo "NX_TRELLO_API_KEY=${{ secrets.TRELLO_API_KEY }}" >> .env
          echo "NX_TRELLO_TOKEN=${{ secrets.TRELLO_TOKEN }}" >> .env
          echo "NX_DISABLE_SHARED_WORKER=true" >> .env
          echo "NX_EXPOSE_WORKER_ON_WINDOW=true" >> .env
          echo "NX_API_URL=http://localhost:3000/development" >> .env
          echo "NX_ENABLE_DEBUG=true" >> .env

      - name: Build web app
        run: npx nx build web-app --production --skip-nx-cache

      - name: Run headless test
        uses: GabrielBB/xvfb-action@v1
        with:
          run: npx nx affected -t e2e --base=origin/main --exclude=electron-e2e,website-e2e,browser-extension-e2e

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-artifact-web-app
          path: apps/web-app/e2e/src/artifacts

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: trace-${{ matrix.os }}-web-app
          path: apps/web-app/test-results

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{github.event.client_payload.e2e_web_app_check_id}}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}

  e2e-electron:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    name: Electron e2e tests
    runs-on: ${{ matrix.os }}
    env:
      CHECK_ID_KEY: ${{ format('e2e_electron_{0}_check_id', matrix.os) }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Create GitHub App Installation Token
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          check_id: ${{ github.event.client_payload[env.CHECK_ID_KEY] }}
          token: ${{ steps.installation_token.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          status: "in_progress"
          repo: ${{ secrets.REPOSITORY }}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}

      - name: Set Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Setup keychain
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          KEYCHAIN_PATH: ./keychain
          KEYCHAIN_PASSWORD: ${{ secrets.MACOS_KEYCHAIN_PASSWORD }}
          ENCODED_CERT: ${{ secrets.MACOS_BASE64_CERTIFICATE }}
          ENCODED_INSTALLER_CERT: ${{ secrets.MACOS_BASE64_INSTALLER_CERTIFICATE }}
        run: |
          echo $KEYCHAIN_PATH
          mkdir $KEYCHAIN_PATH
          echo -n "$ENCODED_CERT" | base64 --decode --output Cert.p12
          echo -n "$ENCODED_INSTALLER_CERT" | base64 --decode --output InstallerCert.p12

          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 90000000 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security import Cert.p12 -P $KEYCHAIN_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign
          security import InstallerCert.p12 -P $KEYCHAIN_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security find-certificate -c "Developer ID Application: Przemysaw Zydek (24P5W7TK47)" -p >> ./cert.pem
          security find-certificate -c "Developer ID Installer: Przemysaw Zydek (24P5W7TK47)" -p >> ./installer_cert.pem
          sudo security authorizationdb write com.apple.trust-settings.admin allow
          sudo security add-trusted-cert -d -r trustRoot -k $KEYCHAIN_PATH ./cert.pem
          sudo security add-trusted-cert -d -r trustRoot -k $KEYCHAIN_PATH ./installer_cert.pem
          security find-identity -p codesigning

      - name: Install dependencies
        run: npm install

      - name: Check appdmg
        if: ${{ matrix.os == 'macos-latest' }}
        run: npm ls appdmg

      - name: Setup electron deps
        run: npm run electron-install-deps

      - name: Setup github actions
        working-directory: .github/actions
        run: npm install

      - name: Setup playwright and actions
        run: npx playwright install-deps && npx playwright install

      - name: Build tools
        run: npm run build:tools

      - name: Create .env file
        run: |
          echo "NX_TRELLO_API_KEY=${{ secrets.TRELLO_API_KEY }}" >> apps/electron/main/.env
          echo "NODE_ENV=production" >> apps/electron/main/.env
          echo "NX_SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> apps/electron/main/.env
          echo "NX_API_URL=http://localhost:3000/development" >> apps/electron/main/.env
          echo "NX_WEBSITE_URL=http://localhost:4200" >> apps/electron/main/.env
          echo "NX_ENABLE_DEBUG=true" >> .env
          echo "NX_TRELLO_TOKEN=${{ secrets.TRELLO_TOKEN }}" >> apps/electron/main/.env

      - name: Package
        run: npx nx affected -t make --base=origin/main --skip-nx-cache
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}

      - name: Run headless test
        uses: GabrielBB/xvfb-action@v1
        env:
          NX_SHORT_BREAK_DURATION_SECONDS: 5
          NX_LONG_BREAK_DURATION_SECONDS: 15
          NX_WORK_DURATION_SECONDS: 10
          NX_LONG_BREAK_INTERVAL: 4
          NX_AUTO_RUN_WORK: false
          NX_AUTO_RUN_BREAK: false
          NODE_ENV: production
          # Error dialogs cause CI to run forever
          NX_SKIP_ERROR_DIALOG: true
        with:
          run: npx nx affected -t e2e --base=origin/main --exclude=web-app-e2e,website-e2e,browser-extension-e2e

      - name: Upload Artifact
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: build-${{ matrix.os }}-x64
          path: dist/apps/electron/main/out

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: test-artifact-${{ matrix.os }}-electron
          path: apps/electron/e2e/src/artifacts

      - uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: trace-${{ matrix.os }}-electron
          path: test-results

      - name: Create GitHub App Installation Token
        if: always()
        uses: jnwng/github-app-installation-token-action@v2
        id: installation_token_after
        with:
          appId: ${{ secrets.GH_APP_ID }}
          installationId: ${{ secrets.GH_APP_INSTALLATION_ID }}
          privateKey: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ steps.installation_token_after.outputs.token }}
          sha: ${{github.event.client_payload.github.sha}}
          conclusion: ${{ job.status }}
          status: "completed"
          repo: ${{ secrets.REPOSITORY }}
          check_id: ${{ github.event.client_payload[env.CHECK_ID_KEY] }}
          details_url: ${{ github.server_url }}/TheUnderScorer/time-neko/actions/runs/${{ github.run_id }}/jobs/${{ github.job }}
