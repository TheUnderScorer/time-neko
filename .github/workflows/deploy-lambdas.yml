name: Deploy lambdas
on:
  repository_dispatch:
    types: [ deploy-lambdas ]

jobs:
  get-data:
    name: Get data
    if: ${{ github.event.client_payload.github.event_name != 'create' || contains(github.event.client_payload.github.ref, 'lambdas-v') }}
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.get_env.outputs.env }}
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.event.client_payload.github.ref }}

      - name: Set Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      - name: Install npm dependencies
        run: npm install --prefix .github/actions

      - name: Get tag
        id: get_tag
        uses: ./.github/actions/tag-provider
        with:
          ghRef: ${{ github.event.client_payload.github.ref }}

      - name: Get env
        id: get_env
        uses: ./.github/actions/env-provider
        with:
          tag: ${{ steps.get_tag.outputs.tag }}
          envFromInput: ${{ github.event.client_payload.enviroment }}
      - name: Output vars
        run: |
          echo "Env: ${{ steps.get_env.outputs.env }}"
          echo "Ref: ${{ github.event.client_payload.github.ref }}"
          echo "Input env: ${{ github.event.client_payload.enviroment }}"

  deploy-lambdas:
    name: Deploy lambdas
    needs:
      - get-data
    environment: ${{ needs.get-data.outputs.env }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_ADMIN_TOKEN }}
          fetch-depth: 0
          repository: ${{ secrets.REPOSITORY }}
          ref: ${{ github.event.client_payload.github.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Cache
        uses: actions/cache@v2
        with:
          path: node_modules
          key: nodemodules-${{ hashFiles('package-lock.json') }}
          restore-keys: nodemodules-

      - run: npm install

      - name: serverless deploy
        run: npx nx run lambdas:deploy:${{ needs.get-data.outputs.env }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
